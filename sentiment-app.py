# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kvkmC9Je29hcD5DPgTQIm78Bq9w0DIPJ
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix

from google.colab import files
files.upload()


df = pd.read_csv("sentiment_data/training.1600000.processed.noemoticon.csv",
                 encoding='latin-1',
                 header=None)
df.columns = ['target', 'id', 'date', 'flag', 'user', 'text']
df = df[['target', 'text']]

# Convert target: 0 = negative, 4 = positive â†’ map to 0/1
df['target'] = df['target'].map({0:0, 4:1})

print(df.head())
print(df['target'].value_counts())

pos_text = " ".join(df[df['target']==1]['text'][:2000])
neg_text = " ".join(df[df['target']==0]['text'][:2000])

plt.figure(figsize=(14,6))
plt.subplot(1,2,1)
wc = WordCloud(width=500, height=400, background_color='white').generate(pos_text)
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')
plt.title("Positive Tweets")

plt.subplot(1,2,2)
wc = WordCloud(width=500, height=400, background_color='black').generate(neg_text)
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')
plt.title("Negative Tweets")
plt.show()

X = df['text']
y = df['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

vectorizer = TfidfVectorizer(stop_words='english', max_features=10000)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = MultinomialNB()
model.fit(X_train_vec, y_train)

# Predictions
y_pred = model.predict(X_test_vec)

print(classification_report(y_test, y_pred, target_names=['Negative','Positive']))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=['Negative','Positive'],
            yticklabels=['Negative','Positive'])
plt.title("Confusion Matrix")
plt.show()

from sklearn.metrics import f1_score

TN = 121814
FP = 38186
FN = 39382
TP = 120618

# Precision and Recall
precision = TP / (TP + FP)
recall = TP / (TP + FN)

# F1 Score
f1 = 2 * (precision * recall) / (precision + recall)

print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1:.4f}")

test_sentences = [
    "I love this product! It's amazing.",
    "Worst service ever, I'm so disappointed.",
    "Not bad, could be better.",
    "I'm extremely happy with my purchase!"
]
test_vec = vectorizer.transform(test_sentences)
preds = model.predict(test_vec)

for text, pred in zip(test_sentences, preds):
    print(f"{text} -> {'Positive' if pred==1 else 'Negative'}")

import joblib
joblib.dump(model, "sentiment_model.pkl")
joblib.dump(vectorizer, "tfidf_vectorizer.pkl")

from google.colab import files
files.download("sentiment_model.pkl")
files.download("tfidf_vectorizer.pkl")

import streamlit as st
import joblib
import pandas as pd

# Load the model and vectorizer
try:
    model = joblib.load("sentiment_model.pkl")
    vectorizer = joblib.load("tfidf_vectorizer.pkl")
except FileNotFoundError:
    st.error("Model files not found. Please run the previous cells to train and save the model.")
    st.stop()


st.title("Tweet Sentiment Analysis")

st.write("Enter a tweet below to analyze its sentiment.")

# Text input
tweet_text = st.text_area("Tweet", "")

if st.button("Analyze"):
    if tweet_text:
        # Preprocess the input text
        tweet_vec = vectorizer.transform([tweet_text])

        # Predict the sentiment
        prediction = model.predict(tweet_vec)
        sentiment = "Positive" if prediction[0] == 1 else "Negative"

        st.write(f"Sentiment: {sentiment}")
    else:
        st.warning("Please enter some text to analyze.")


from google.colab import files
files.download("sentiment_app.py")